const express = require('express');
const multer = require('multer');
const cors = require('cors');
const fs = require('fs');
const path = require('path');
const OpenAI = require('openai');
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 3001;

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ OpenAI
const openai = new OpenAI({
    apiKey: process.env.OPENAI_API_KEY // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å API –∫–ª—é—á –≤ .env —Ñ–∞–π–ª–µ
});

// Middleware
app.use(cors({
    origin: ['http://localhost:3000', 'http://127.0.0.1:3000'], // URL —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    methods: ['GET', 'POST', 'OPTIONS'],
    allowedHeaders: ['Content-Type', 'Authorization'],
    credentials: true
}));

app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
const uploadsDir = path.join(__dirname, 'uploads');
if (!fs.existsSync(uploadsDir)) {
    fs.mkdirSync(uploadsDir, { recursive: true });
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ multer –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
const storage = multer.diskStorage({
    destination: (req, file, cb) => {
        cb(null, uploadsDir);
    },
    filename: (req, file, cb) => {
        const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
        const extension = path.extname(file.originalname);
        cb(null, file.fieldname + '-' + uniqueSuffix + extension);
    }
});

const upload = multer({
    storage: storage,
    limits: {
        fileSize: 25 * 1024 * 1024 // 25MB –ª–∏–º–∏—Ç (–º–∞–∫—Å–∏–º—É–º –¥–ª—è gpt-4o-mini-transcribe API)
    },
    fileFilter: (req, file, cb) => {
        console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞:', file.originalname, 'MIME:', file.mimetype);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞
        const allowedMimes = [
            'audio/mp3',
            'audio/mpeg',
            'audio/wav',
            'audio/x-wav',
            'audio/ogg',
            'audio/flac',
            'audio/m4a',
            'audio/mp4',
            'audio/webm',
            'audio/aac'
        ];

        const allowedExtensions = ['.mp3', '.wav', '.ogg', '.flac', '.m4a', '.webm', '.aac'];
        const fileExtension = path.extname(file.originalname).toLowerCase();

        if (allowedMimes.includes(file.mimetype) || allowedExtensions.includes(fileExtension)) {
            console.log('‚úÖ –§–∞–π–ª –ø—Ä–∏–Ω—è—Ç:', file.originalname);
            cb(null, true);
        } else {
            console.log('‚ùå –§–∞–π–ª –æ—Ç–∫–ª–æ–Ω—ë–Ω:', file.originalname, 'MIME:', file.mimetype);
            cb(new Error('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: MP3, WAV, OGG, FLAC, M4A, WEBM, AAC'), false);
        }
    }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ gpt-4o-mini-transcribe API
async function transcribeAudio(filePath) {
    try {
        console.log('üé§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é:', path.basename(filePath));

        const response = await openai.audio.transcriptions.create({
            file: fs.createReadStream(filePath),
            model: "gpt-4o-mini-transcribe",
            language: "hy", // –∞—Ä–º—è–Ω—Å–∫–∏–π —è–∑—ã–∫ (ISO 639-1 –∫–æ–¥)
            response_format: "text",
            temperature: 0.2 // –î–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
        });
        console.log(response);
        console.log('‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ, –¥–ª–∏–Ω–∞:', response.length, '—Å–∏–º–≤–æ–ª–æ–≤');
        return response;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏:', error.message);

        // –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ OpenAI
        if (error.status === 429) {
            throw new Error('rate_limit_exceeded');
        } else if (error.status === 401) {
            throw new Error('invalid_api_key');
        } else if (error.status === 413) {
            throw new Error('file_too_large');
        } else if (error.message.includes('audio')) {
            throw new Error('unsupported_file_format');
        }

        throw error;
    }
}

// –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏ (–µ—Å–ª–∏ OpenAI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)
async function transcribeAudioLocal(filePath) {
    console.log('üîß –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏ –¥–ª—è —Ñ–∞–π–ª–∞:', path.basename(filePath));

    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å gpt-4o-mini-transcribe
    // –ù–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ Python subprocess:

    // const { spawn } = require('child_process');
    // return new Promise((resolve, reject) => {
    //   const python = spawn('python3', ['whisper_transcribe.py', filePath, 'hy']);
    //   let result = '';
    //   let errorOutput = '';
    //
    //   python.stdout.on('data', (data) => {
    //     result += data.toString();
    //   });
    //
    //   python.stderr.on('data', (data) => {
    //     errorOutput += data.toString();
    //   });
    //
    //   python.on('close', (code) => {
    //     if (code === 0) {
    //       resolve(result.trim());
    //     } else {
    //       reject(new Error(`Python script failed: ${errorOutput}`));
    //     }
    //   });
    // });

    // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å)
    const demoTexts = [
        "‘≤’°÷Ä÷á ’±’•’¶! ’ç’° ÷Ö÷Ä’´’∂’°’Ø ’ß ’ø’•÷Ñ’Ω’ø’´ ’∞’°’µ’•÷Ä’•’∂ ’¨’•’¶’æ’∏’æ:",
        "‘±’µ’Ω ÷Ü’°’µ’¨’® ’∞’°’ª’∏’≤’∏÷Ç’©’µ’°’¥’¢ ’¥’∑’°’Ø’æ’•÷Å ’ø’•’≤’°’Ø’°’∂ ’¥’∏’§’•’¨’∏’æ:",
        "‘Ω’∂’§÷Ä’∏÷Ç’¥ ’•’∂÷Ñ ’Ø’°÷Ä’£’°’æ’∏÷Ä’•’¨ OpenAI API ’¢’°’∂’°’¨’´’∂ ’°’æ’•’¨’´ ’≥’∑’£÷Ä’´’ø ’°÷Ä’§’µ’∏÷Ç’∂÷Ñ’∂’•÷Ä’´ ’∞’°’¥’°÷Ä:"
    ];

    const randomText = demoTexts[Math.floor(Math.random() * demoTexts.length)];

    // –°–∏–º—É–ª—è—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    await new Promise(resolve => setTimeout(resolve, 2000));

    return randomText;
}

// API endpoint –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
app.post('/api/transcribe', upload.single('audio'), async (req, res) => {
    const startTime = Date.now();

    try {
        if (!req.file) {
            console.log('‚ùå –ê—É–¥–∏–æ—Ñ–∞–π–ª –Ω–µ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω');
            return res.status(400).json({
                error: '–ê—É–¥–∏–æ—Ñ–∞–π–ª –Ω–µ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª.'
            });
        }

        console.log('üìÅ –ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª:', {
            name: req.file.originalname,
            size: `${(req.file.size / 1024 / 1024).toFixed(2)} MB`,
            mimetype: req.file.mimetype,
            path: req.file.path
        });

        const filePath = req.file.path;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        const stats = fs.statSync(filePath);
        if (stats.size > 25 * 1024 * 1024) {
            // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª
            fs.unlinkSync(filePath);
            console.log('‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π:', (stats.size / 1024 / 1024).toFixed(2), 'MB');
            return res.status(400).json({
                error: '–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 25MB'
            });
        }

        let transcribedText;
        let usedService = 'unknown';

        // –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å OpenAI Whisper API
        if (process.env.OPENAI_API_KEY && process.env.OPENAI_API_KEY !== 'your_openai_api_key_here') {
            try {
                console.log('ü§ñ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ OpenAI gpt-4o-mini-transcribe API...');
                transcribedText = await transcribeAudio(filePath);
                usedService = 'OpenAI gpt-4o-mini-transcribe';
            } catch (openaiError) {
                console.error('‚ùå –û—à–∏–±–∫–∞ OpenAI API:', openaiError.message);

                let errorMessage = '–û—à–∏–±–∫–∞ OpenAI API';

                if (openaiError.message === 'rate_limit_exceeded') {
                    errorMessage = '–ü—Ä–µ–≤—ã—à–µ–Ω–∞ –∫–≤–æ—Ç–∞ API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à –ø–ª–∞–Ω OpenAI.';
                } else if (openaiError.message === 'invalid_api_key') {
                    errorMessage = '–ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á OpenAI. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env';
                } else if (openaiError.message === 'file_too_large') {
                    errorMessage = '–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è OpenAI API.';
                } else if (openaiError.message === 'unsupported_file_format') {
                    errorMessage = 'OpenAI –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —ç—Ç–æ—Ç —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞.';
                }

                // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
                fs.unlinkSync(filePath);
                return res.status(500).json({ error: errorMessage });
            }
        } else {
            console.log('‚ö†Ô∏è  OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å...');
            try {
                transcribedText = await transcribeAudioLocal(filePath);
                usedService = '–õ–æ–∫–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å (–¥–µ–º–æ)';
            } catch (localError) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏:', localError.message);
                fs.unlinkSync(filePath);
                return res.status(500).json({
                    error: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.'
                });
            }
        }

        // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        fs.unlinkSync(filePath);
        console.log('üóëÔ∏è  –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω:', path.basename(filePath));

        const processingTime = Date.now() - startTime;
        console.log(`‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ ${processingTime}ms —Å –ø–æ–º–æ—â—å—é: ${usedService}`);

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        res.json({
            text: transcribedText,
            filename: req.file.originalname,
            size: req.file.size,
            service: usedService,
            processingTime: processingTime
        });

    } catch (error) {
        console.error('üí• –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞:', error);

        // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        if (req.file && fs.existsSync(req.file.path)) {
            fs.unlinkSync(req.file.path);
            console.log('üóëÔ∏è  –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏');
        }

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –æ—à–∏–±–æ–∫
        let errorMessage = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞';

        if (error.message.includes('ENOENT')) {
            errorMessage = '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –∑–∞–Ω–æ–≤–æ.';
        } else if (error.message.includes('EMFILE')) {
            errorMessage = '–°–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
        } else if (error.message.includes('timeout')) {
            errorMessage = '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å —Ñ–∞–π–ª–æ–º –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞.';
        }

        res.status(500).json({
            error: errorMessage,
            details: process.env.NODE_ENV === 'development' ? error.message : undefined,
            timestamp: new Date().toISOString()
        });
    }
});

// Endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞
app.get('/api/status', (req, res) => {
    res.json({
        status: 'OK',
        timestamp: new Date().toISOString(),
        hasOpenAiKey: !!process.env.OPENAI_API_KEY,
        environment: process.env.NODE_ENV || 'production',
        uploadsDir: uploadsDir,
        maxFileSize: '25MB'
    });
});

// Endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
app.get('/api/formats', (req, res) => {
    res.json({
        supportedFormats: ['mp3', 'wav', 'ogg', 'flac', 'm4a', 'webm', 'aac'],
        maxFileSize: 25 * 1024 * 1024,
        maxFileSizeHuman: '25MB',
        supportedMimeTypes: [
            'audio/mp3',
            'audio/mpeg',
            'audio/wav',
            'audio/x-wav',
            'audio/ogg',
            'audio/flac',
            'audio/m4a',
            'audio/mp4',
            'audio/webm',
            'audio/aac'
        ]
    });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ multer
app.use((error, req, res, next) => {
    console.error('üö´ Middleware –æ—à–∏–±–∫–∞:', error.message);

    if (error instanceof multer.MulterError) {
        if (error.code === 'LIMIT_FILE_SIZE') {
            return res.status(400).json({
                error: '–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 25MB'
            });
        }
        if (error.code === 'LIMIT_FILE_COUNT') {
            return res.status(400).json({
                error: '–ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ñ–∞–π–ª –∑–∞ —Ä–∞–∑'
            });
        }
        if (error.code === 'LIMIT_UNEXPECTED_FILE') {
            return res.status(400).json({
                error: '–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –ø–æ–ª–µ —Ñ–∞–π–ª–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–ª–µ "audio"'
            });
        }

        return res.status(400).json({
            error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: ' + error.message
        });
    }

    if (error.message.includes('—Ñ–æ—Ä–º–∞—Ç')) {
        return res.status(400).json({
            error: error.message
        });
    }

    // –û–±—â–∞—è –æ—à–∏–±–∫–∞
    res.status(500).json({
        error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
        details: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
});

// 404 –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
app.use('*', (req, res) => {
    res.status(404).json({
        error: 'Endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω',
        availableEndpoints: [
            'POST /api/transcribe - –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∞—É–¥–∏–æ',
            'GET /api/status - –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞',
            'GET /api/formats - –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã'
        ]
    });
});

// Graceful shutdown
process.on('SIGINT', () => {
    console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞...');

    // –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    try {
        const files = fs.readdirSync(uploadsDir);
        files.forEach(file => {
            const filePath = path.join(uploadsDir, file);
            fs.unlinkSync(filePath);
            console.log('üóëÔ∏è  –£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª:', file);
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:', error.message);
    }

    process.exit(0);
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const server = app.listen(PORT, () => {
    console.log('\nüöÄ ============================================');
    console.log(`üì° –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞: http://localhost:${PORT}`);
    console.log(`üìù API endpoint: http://localhost:${PORT}/api/transcribe`);
    console.log(`üìä –°—Ç–∞—Ç—É—Å: http://localhost:${PORT}/api/status`);
    console.log(`üîë OpenAI API –∫–ª—é—á: ${process.env.OPENAI_API_KEY ? '‚úÖ –Ω–∞–π–¥–µ–Ω' : '‚ùå –Ω–µ –Ω–∞–π–¥–µ–Ω'}`);
    console.log(`üìÅ –ü–∞–ø–∫–∞ uploads: ${uploadsDir}`);
    console.log(`üåç –°—Ä–µ–¥–∞: ${process.env.NODE_ENV || 'production'}`);
    console.log('============================================\n');

    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É uploads –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if (!fs.existsSync(uploadsDir)) {
        fs.mkdirSync(uploadsDir, { recursive: true });
        console.log(`üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ uploads: ${uploadsDir}`);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å OpenAI API
    if (process.env.OPENAI_API_KEY && process.env.OPENAI_API_KEY !== 'your_openai_api_key_here') {
        console.log('ü§ñ OpenAI gpt-4o-mini-transcribe API –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é');
    } else {
        console.log('‚ö†Ô∏è  OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å (–¥–µ–º–æ —Ä–µ–∂–∏–º)');
        console.log('üí° –î–æ–±–∞–≤—å—Ç–µ OPENAI_API_KEY –≤ —Ñ–∞–π–ª .env –¥–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏');
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å–µ—Ä–≤–µ—Ä–∞
server.on('error', (error) => {
    if (error.code === 'EADDRINUSE') {
        console.error(`‚ùå –ü–æ—Ä—Ç ${PORT} —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø–æ—Ä—Ç –∏–ª–∏ –∑–∞–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É—é—â–µ–µ —ç—Ç–æ—Ç –ø–æ—Ä—Ç.`);
        process.exit(1);
    } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error.message);
    }
});

module.exports = app;